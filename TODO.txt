**Phase 1: PGN Input, Basic Parsing, Display, and Navigation**

1.  **Functional Change: Add UI Elements for PGN Input as text and Tracked Player Name. simsim314 by default**
    *   Files: `engine.html`
    *   Description: The UI is modified to visually include: a PGN paste text area, a "Tracked Player Name" input field, and an "Analyze PGN" button. 
    *it will funcyion exactly the same as load pgn from file 
    

2.  **Functional Change: Enable "Analyze PGN" Button to Read and Log Inputs.**
    *   Files: `controller-main.js`
    *   Description: Clicking "Analyze PGN" reads text from the PGN area and player name input, then logs these values to the browser console. The controller stores these raw inputs.

3.  **Functional Change: Parse PGN String and Display Basic Header Info.**
    *   Files: `controller-main.js`, `status-display.js` (or direct DOM update from controller)
    *   Description: On "Analyze PGN" click (after reading inputs), the system attempts to parse the PGN string. If successful, it extracts and displays "White" and "Black" player names in the `#status` div. If parsing fails, an error is shown in `#status`. The parsed `chess.js` game object is stored in the controller.

4.  **Functional Change: Identify Tracked Player and Update Status Display.**
    *   Files: `controller-main.js`, `status-display.js` (or direct DOM update)
    *   Description: After successful PGN parsing, the system identifies the color of the "Tracked Player" (using the name from Package 2) from PGN headers. The `#status` div is updated to show "... Tracked Player: [Name] as [Color]." If not found, a message indicates this. The tracked player's color is stored in the controller.

5.  **Functional Change: Populate Move List with Basic PGN Moves.**
    *   Files: `controller-main.js`, `status-display.js`
    *   Description: After PGN parsing and player identification, the `#movelist` UI is populated with each move from the PGN (ply number, SAN). Moves by players other than the tracked player are visually distinct (e.g., greyed out). A basic internal `pgnAnalysisData` array is created in the controller, storing ply, SAN, UCI, FEN before move, and if it was the tracked player's move.

6.  **Functional Change: Enable Basic Navigation (Board Update Only).**
    *   Files: `controller-main.js`, `navigation-control.js`
    *   Description: Navigation buttons ("Start", "Prev", "Next", "End") become active. Clicking them updates a `currentPgnDisplayPly` in the controller. The main chessboard (`#board`) updates to show the FEN corresponding to the `fen_before_move` of the `currentPgnDisplayPly` from `pgnAnalysisData`. The `#status` div shows basic info about the viewed ply. Move list highlighting for the current ply is added.

7.  **Functional Change: Display Actual PGN Move Arrow on Board during Navigation.**
    *   Files: `controller-main.js`
    *   Description: When navigating (Package 6), in addition to setting the board FEN, an arrow representing the *actual PGN move* made to reach the *next* position (i.e., the move associated with the *current* `fen_before_move` if `currentPgnDisplayPly > 0`) is drawn on the board using a distinct color (e.g., `USER_PGN_MOVE_COLOR`). If at ply 0, no PGN move arrow is shown.

**Phase 2: Introducing Single "GM Level" Conceptual Engine Analysis**

8.  **Functional Change: Request "GM Level" Analysis for Currently Viewed Position.**
    *   Files: `controller-main.js`, `engine-communication.js`
    *   Description: When the user navigates to a ply (using functionality from Package 6), the system additionally sends a *single analysis request* to the underlying chess engine for the `fen_before_move` of the `currentPgnDisplayPly`. This request uses parameters simulating "GM Level" strength. The result is logged to the console for now.

9.  **Functional Change: Display "GM Level" Top Move Arrow and Score on Board.**
    *   Files: `controller-main.js`, `constants.js`
    *   Description: Building on Package 8, when the "GM Level" analysis result (best move UCI/SAN, score) is received for the `currentPgnDisplayPly`'s `fen_before_move`:
        *   An arrow for this GM suggested best move is drawn on the board using `HINT_PALETTE_2[0]`.
        *   Its score is displayed as text on the arrow's target square.
        *   This GM hint (move, score) is stored in the `pgnAnalysisData` for the current ply.

10. **Functional Change: Display "GM Level" Top Move Textually in Feedback Area.**
    *   Files: `controller-main.js`, `status-display.js` (or direct DOM update to `#analysis` area)
    *   Description: When the "GM Level" analysis result is received and displayed on the board (Package 9), the `#analysis` text area is also updated to show: "GM Suggestion: [SAN of GM best move] (Eval: [Score])."

11. **Functional Change: Automate "GM Level" Analysis for All PGN Positions on Load.**
    *   Files: `controller-main.js`, `engine-communication.js`
    *   Description: When "Analyze PGN" is clicked and PGN is successfully parsed (Package 1-4 completed):
        *   The system iterates through *all* FENs *before* each move in `pgnAnalysisData`.
        *   For each, it performs the "GM Level" engine analysis (as in Package 8) and stores the top move/score in the corresponding `pgnAnalysisData` entry.
        *   The `#status` div updates with progress (e.g., "GM Analyzing ply X of Y...").
        *   *(The board/feedback display will still only update based on user navigation, but now the data will be pre-populated).*

**Phase 3: Introducing "Player Strength" Conceptual Engine Analysis (Dual View)**

12. **Functional Change: Request "Player Strength" Analysis for Currently Viewed Position.**
    *   Files: `controller-main.js`, `engine-communication.js`
    *   Description: When navigating to a ply, *in addition* to the GM analysis (Package 8), the system also sends a *second analysis request* to the engine for the same `fen_before_move`. This request uses parameters simulating "Player Strength" (e.g., shorter `movetime`). The result is logged to console.

13. **Functional Change: Display "Player Strength" Top Move Arrow and Score on Board.**
    *   Files: `controller-main.js`, `constants.js`
    *   Description: When the "Player Strength" analysis result is received for the `currentPgnDisplayPly`'s `fen_before_move`:
        *   An arrow for this Player Strength suggested best move is drawn on the board using `HINT_PALETTE_1[0]`.
        *   Its score is displayed as text on the arrow's target square.
        *   If this move is the *same* as the GM's top move (already drawn), the arrow for that move changes color to `HINT_COMBINED_COLOR`.
        *   This Player Strength hint is stored in `pgnAnalysisData`.

14. **Functional Change: Display "Player Strength" Top Move Textually in Feedback Area.**
    *   Files: `controller-main.js`, `status-display.js` (or direct DOM update)
    *   Description: When the "Player Strength" analysis result is received (Package 13), the `#analysis` text area is updated to also show: "Player Strength Suggestion: [SAN] (Eval: [Score])."

15. **Functional Change: Automate "Player Strength" Analysis for All PGN Positions on Load.**
    *   Files: `controller-main.js`, `engine-communication.js`
    *   Description: When "Analyze PGN" is clicked, after GM analysis for all plies is done (Package 11):
        *   The system iterates *again* (or incorporates into the first loop if engine communication allows parallel/queued distinct requests) through all FENs *before* each move in `pgnAnalysisData`.
        *   For each, it performs "Player Strength" engine analysis and stores the top move/score.
        *   `#status` updates with progress (e.g., "Player Strength Analyzing ply X of Y...").

**Phase 4: Move Quality Assessment and Enhanced Display**

16. **Functional Change: Calculate and Store Evaluation of Actual PGN Move (GM Perspective).**
    *   Files: `controller-main.js`, `engine-communication.js`
    *   Description: During the automated analysis loop (either with GM or as a separate pass after all pre-move analyses are done):
        *   For each PGN move, determine the board FEN *after* the actual PGN move is played.
        *   Request a quick evaluation of this *resulting position* from the engine (GM strength perspective, e.g., `depth 1`).
        *   Store this evaluation (e.g., `score_cp_after_actual_move_gm`) in the `pgnAnalysisData` for that ply.

17. **Functional Change: Calculate and Store Move Quality Symbols and Evaluation Drop.**
    *   Files: `controller-main.js`, `constants.js`
    *   Description: After all necessary evaluations for a ply are stored (GM best before move, GM eval after actual move):
        *   If it was the tracked player's move:
            *   Calculate the evaluation drop (e.g., centipawn loss) by comparing GM's best suggestion's score with the GM's score of the position after the player's actual move (adjusted for whose turn it was).
            *   Determine and store a "Quality Symbol" (e.g., "??", "?", "!") based on this drop and predefined thresholds (e.g., `BLUNDER_THRESHOLD`).
            *   Store the drop value (e.g., `cp_loss_gm`).

18. **Functional Change: Display Quality Symbols in Move List.**
    *   Files: `status-display.js`
    *   Description: The `#movelist` population logic (from Package 5, refined by Package 1.5) now also displays the calculated "Quality Symbol" next to each move made by the tracked player.

19. **Functional Change: Display Evaluation Drop in Feedback Area.**
    *   Files: `status-display.js` (or direct DOM update from controller)
    *   Description: When viewing an analyzed ply made by the tracked player, the `#analysis` text area now also displays: "Evaluation Drop (vs GM Best): [Calculated Drop Value]."

**Phase 5: "Play From Here" Functionality**

20. **Functional Change: Add "Play From Here" UI Button.**
    *   Files: `engine.html`
    *   Description: A "Play From Here" button is added to the UI. It is initially disabled.

21. **Functional Change: Enable "Play From Here" Button when Viewing Analyzed PGN.**
    *   Files: `controller-main.js` (UI management part)
    *   Description: The "Play From Here" button becomes enabled whenever the user is navigating through an analyzed PGN (i.e., `currentPgnDisplayPly` is valid). It is disabled otherwise, or during analysis.

22. **Functional Change: Implement "Play From Here" - Load Position and Switch Mode.**
    *   Files: `controller-main.js`, `play-mode-controller.js`
    *   Description: When "Play From Here" is clicked:
        1.  The system retrieves the `fen_before_move` from `pgnAnalysisData` at the `currentPgnDisplayPly`.
        2.  This FEN is loaded into the main game board (`controller.game`) used for interactive play. The visual board (`#board`) updates.
        3.  The application's overall `controller.mode` switches to `ChessConstants.kModePlay`.
        4.  `controller.humanSide` is set based on whose turn it is in the loaded FEN.
        5.  The PGN analysis display UI (move list, specific feedback) is hidden or deactivated, and the normal play mode UI elements become active.
        6.  The `play-mode-controller.js`'s `enginePlay` function is triggered if it's now the engine's turn. This function should use parameters consistent with the "Player Strength" engine for this play session.

This list is much more granular. Each step should be a small, verifiable change. We can add even more intermediate steps if needed (e.g., displaying only one piece of GM data textually before adding the arrow, then adding the arrow, then adding the score to the arrow).
